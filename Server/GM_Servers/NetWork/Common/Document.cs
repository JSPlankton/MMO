using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;


internal class Document
{


    #region TCP粘包
    /**
     * 概念：指在 TCP 通信中，由于发送方和接收方的读写速度、数据量不一致，导致多个数据包被错误地合并成一个数据包处理的现象。
     * 
     *  产生原因：
     *         1.TCP 是流式协议（无边界），数据以字节流形式传输，内核缓冲区可能累积多包数据。
     *         2.发送方连续发送多个小数据包，接收方未及时读取，导致数据在缓冲区中粘连。
     *  
     *  解决方法：封包与拆包
     *         核心思想：在应用层为数据添加长度字段，明确数据包边界。
     *                   封包（发送方）：
     *                   将数据分为 “长度字段 + 数据内容” 两部分，长度字段通常占 4 字节（uint32_t），存储数据内容的字节数。
     *                   拆包（接收方）：
     *                   先读取长度字段，再根据长度读取对应字节数的数据内容。最后循环读取，
     *                   
     */
    #endregion

    #region ProtoBuf
    /**
     * 网络传输数据时，通常需要将数据对象序列化为一种可以在网络上传输的格式，然后再进行反序列化以恢复原始数据对象。
     * 
     * 
     * ProtoBuf（全称Protocol Buffer）：是Google公司开发的一种数据描述语言，类似于XML能够将结构化数据序列化，可用于数据存储、通信协议等方面。
     *                                  它是数据结构序列化和反序列化框架，它具有以下特点：
     *                                  
     *                  1.语⾔⽆关、平台无关：即 ProtoBuf ⽀持 Java、C++、Python 等多种语⾔，⽀持多个平台
     *                  2.⾼效：即⽐ XML 更小、更快、更为简单
     *                  3.扩展性、兼容性好：你可以更新数据结构，而不影响和破坏原有的旧程序
     *                  
     * 常用的序列化方法：JSON，XML，二进制格式，  protobuf               
     * 
     * protobuf和json区别:
     *              Protobuf和JSON的核心区别在于数据格式、传输效率和可读性‌：Protobuf采用二进制编码，
     *              具有更小的数据体积和更快的序列化/反序列化速度，但缺乏人类可读性；JSON使用明文文本格式，易于阅读调试但传输效率较低。‌‌
     *              
     *      ‌数据结构与编码方式:
     *              1.‌数据描述方式‌：Protobuf需预先通过.proto文件定义结构化模式(IDL)，并通过编译器生成代码实现类型约束；
     *              JSON使用自描述键值对结构，无需预定义模式‌‌
     *              2.数据编码格式‌：Protobuf采用二进制紧凑格式，字段通过编号标识(4)；JSON采用明文文本格式，冗余字段名重复存储(3)
     *              
     *      性能与资源消耗对比:
     *              特性        	Protobuf	             JSON
     *          序列化后体积	比JSON小60%-80%‌‌        冗余文本导致较大体积
     *          序列化速度	       快5-10倍‌‌            需文本解析和类型转换
     *          内存消耗	优化结构减少内存占用	 动态类型解析增加内存开销
     * 
     */
    #endregion

    #region SqlSugar

    /**
     * 
     * SqlSugar 是一款 老牌 .NET开源ORM框架，由果糖大数据科技团队维护和更新 ，开箱即用最易上手的ORM
     *          它是国内开发者在2015年基于.NET平台独立开发‌的一款非常不错的框架，
     *          我们还是应该多多支持的国内的大牛的。
     * 
     * ORM :是一种程序技术，用于将关系型数据库中的数据映射到对象上。
     *      主要目的是简化数据库操作，使得开发人员可以像操作对象一样来操作数据库。
     * 
     * 原理:
     *      数据表与类的映射：数据库中的表对应为类。
     *      记录与对象的映射：表中的记录对应为对象实例。
     *      字段与属性的映射：表中的字段对应为类的属性。
     *      
     * 核心：以面先对象的思想完成对数据库的操作
     * 
     * 优点:
     *      提高开发效率：减少 SQL 语句的编写工作。
     *      易于维护：修改数据库结构时，只需调整映射关系，减少对业务逻辑的影响。
     *      增强代码可读性：以面向对象的方式处理数据，更符合编程习惯。
     *      10年开源信誉值得信赖，从不搞收费，文档也全免费
     *      
     * SqlSugar的主要特性包括：
     *
     *   ‌支持多种数据库‌：如 SQL Server 、 MySQL 、 Oracle 、 PostgreSQL 等‌
     *   ‌动态表达式树解析‌：将Lambda表达式转化为适配不同数据库的SQL语句‌
     *   ‌链式调用接口‌：参考 LINQ语法 ，降低学习成本‌
     *   ‌事务处理机制‌：采用 UnitOfWork模式 ，支持跨多表操作的事务一致性‌
     *   ‌分库分表功能‌：通过 ConfigId参数 实现数据库水平拆分‌
     *   ‌读写分离机制‌：自动切换主从库，优化查询和更新操作‌
     *   ‌ AOP特性 ‌：支持面向切面编程，审计功能可追踪数据变更记录‌
     *   ‌代码生成器‌：根据数据库表结构自动生成实体类，支持自定义命名规范‌
     *      
     */


    #endregion

}
